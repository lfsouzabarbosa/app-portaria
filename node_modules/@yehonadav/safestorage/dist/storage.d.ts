export declare const getStorageItems: (storage: Storage) => Record<string, any>;
export declare const setStorageItem: <T = any>(storage: Storage, uuid: string, state: T) => void;
export declare const getStorageItem: <T = any>(storage: Storage, uuid: string) => T;
export declare const tryToGetStorageItem: <T = any>(storage: Storage, uuid: string) => {
    value?: T | undefined;
    error?: Error | undefined;
};
export declare const delStorageItem: (storage: Storage, uuid: string) => void;
export declare class StorageHandler {
    storage: Storage;
    clear: () => void;
    private _debug;
    private readonly _setItem;
    private readonly _clear;
    private readonly _removeItem;
    constructor(getStorage: () => Storage);
    setDebug(debug: boolean): void;
    getDebug(): boolean;
    getItems<T = Record<string, any>>(): T;
    setItem(uuid: string, state: any): void;
    getItem<T = any>(uuid: string): T;
    tryToGetItem<T = any>(uuid: string): {
        value?: T;
        error?: Error;
    };
    delItem(uuid: string): void;
}
export declare const persistLocal: StorageHandler;
export declare const persistSession: StorageHandler;
export declare const local: Storage;
export declare const session: Storage;
