Object.defineProperty(exports, '__esModule', { value: true });

var _replacer = function (cache) { return function (_key, value) {
    return typeof value === "object" && value !== null
        // @ts-ignore
        ? cache.includes(value)
            ? undefined // Duplicate reference found, discard key
            // @ts-ignore
            : cache.push(value) && value // Store value in our collection
        : value;
}; };
// safely handles circular references
var replacerFactory = function () {
    var cache = [];
    return _replacer(cache);
};
var objectifyError = function (e) {
    var error = {};
    Object.getOwnPropertyNames(e).forEach(function (propName) {
        error[propName] = e[propName];
    });
    return error;
};
var errorReplacerFactory = function () {
    var cache = [];
    return function (_key, value) {
        if (value instanceof Error) {
            return objectifyError(value);
        }
        return _replacer(cache)(_key, value);
    };
};
var withStringify = function (call) {
    return function (obj, indent) {
        try {
            return call(obj, indent);
        }
        catch (e) {
            return obj.toString();
        }
    };
};
var stringify = withStringify(function (obj) {
    return JSON.stringify(obj, replacerFactory());
});
var safeStringify = withStringify(function (obj, indent) {
    if (indent === void 0) { indent = 2; }
    return JSON.stringify(obj, replacerFactory(), indent);
});
var stringifyError = withStringify(function (obj, indent) {
    return JSON.stringify(obj, errorReplacerFactory(), indent);
});

exports.errorReplacerFactory = errorReplacerFactory;
exports.objectifyError = objectifyError;
exports.replacerFactory = replacerFactory;
exports.safeStringify = safeStringify;
exports.stringify = stringify;
exports.stringifyError = stringifyError;
//# sourceMappingURL=index.js.map
